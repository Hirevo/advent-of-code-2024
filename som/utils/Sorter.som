" Implementations of various sorting algorithms "
Sorter = (
    ---------

    bubblesort: data = (
        self bubblesort: data with: [ :a :b | a - b ].
    )

    bubblesort: data with: sorterBlk = (
        | sorted len |
        len := data length.
        sorted := false.
        [ sorted ] whileFalse: [
            sorted := true.
            2 to: len do: [ :idx |
                (sorterBlk value: (data at: idx - 1) with: (data at: idx)) > 0 ifTrue: [
                    | temp |
                    temp := data at: idx - 1.
                    data at: idx - 1 put: (data at: idx).
                    data at: idx put: temp.
                    sorted := false.
                ].
            ].
            len := len - 1.
        ].
    )

    quicksort: data = (
        self quicksortImpl: data with: [ :a :b | a - b ] from: 1 to: data length.
    )

    quicksort: data with: sorterBlk = (
        self quicksortImpl: data with: sorterBlk from: 1 to: data length.
    )

    quicksortImpl: data with: sorterBlk from: start to: end = (
        | len pivot left right stop temp |
        len := end - start + 1.
        len < 2 ifTrue: [ ^ self ].
        len = 2 ifTrue: [
            (sorterBlk value: (data at: start) with: (data at: end)) > 0 ifTrue: [
                temp := data at: start.
                data at: start put: (data at: end).
                data at: end put: temp.
            ].
            ^ self.
        ].

        pivot := data at: start.
        left := start + 1.
        right := end.
        stop := false.

        [ left <= right and: stop not ] whileTrue: [
            (sorterBlk value: (data at: left) with: pivot) <= 0 ifTrue: [
                left := left + 1.
            ] ifFalse: [
                (sorterBlk value: (data at: right) with: pivot) > 0 ifTrue: [
                    right = 1 ifTrue: [ stop := true. ] ifFalse: [
                        right := right - 1.
                    ].
                ] ifFalse: [
                    temp := data at: left.
                    data at: left put: (data at: right).
                    data at: right put: temp.
                    left := left + 1.
                    right = 1 ifTrue: [ stop := true. ] ifFalse: [
                        right := right - 1.
                    ].
                ].
            ].
        ].

        left := left - 1.

        temp := data at: start.
        data at: start put: (data at: left).
        data at: left put: temp.

        self quicksortImpl: data with: sorterBlk from: start to: left - 1.
        self quicksortImpl: data with: sorterBlk from: left + 1 to: end.
    )
)
